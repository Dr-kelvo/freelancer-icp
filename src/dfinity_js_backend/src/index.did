service: () -> {
    addBid: (text, text, nat64) -> (variant {Ok:record {id:text; description:text; serviceId:text; freelancerId:text; amount:nat64}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}});
    addService: (record {terms:text; title:text; description:text; deadline:text; category:text}) -> (variant {Ok:record {id:text; status:text; terms:text; title:text; cost:nat64; createdAt:text; user:principal; description:text; deadline:text; updatedAt:opt text; category:text; freelancer:opt text}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}});
    addUser: (record {bio:text; userName:text; email:text; imageUrl:text; expertise:text; skills:vec text; portfolios:vec text}) -> (variant {Ok:record {id:text; bio:text; userName:text; "principal":principal; email:text; imageUrl:text; expertise:text; skills:vec text; portfolios:vec text; services:vec text}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}});
    completeSubscription: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {status:text; memo:nat64; price:nat64; freelancer:principal; paid_at_block:opt nat64}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}});
    createSubscriptionPay: (text) -> (variant {Ok:record {status:text; memo:nat64; price:nat64; freelancer:principal; paid_at_block:opt nat64}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}});
    getActiveServices: () -> (vec record {id:text; status:text; terms:text; title:text; cost:nat64; createdAt:text; user:principal; description:text; deadline:text; updatedAt:opt text; category:text; freelancer:opt text}) query;
    getAddressFromPrincipal: (principal) -> (text) query;
    getBid: (text) -> (variant {Ok:record {id:text; description:text; serviceId:text; freelancerId:text; amount:nat64}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}}) query;
    getBids: () -> (vec record {id:text; description:text; serviceId:text; freelancerId:text; amount:nat64}) query;
    getService: (text) -> (variant {Ok:record {id:text; status:text; terms:text; title:text; cost:nat64; createdAt:text; user:principal; description:text; deadline:text; updatedAt:opt text; category:text; freelancer:opt text}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}}) query;
    getServiceBids: (text) -> (vec record {id:text; description:text; serviceId:text; freelancerId:text; amount:nat64}) query;
    getServices: () -> (vec record {id:text; status:text; terms:text; title:text; cost:nat64; createdAt:text; user:principal; description:text; deadline:text; updatedAt:opt text; category:text; freelancer:opt text}) query;
    getUser: (text) -> (variant {Ok:record {id:text; bio:text; userName:text; "principal":principal; email:text; imageUrl:text; expertise:text; skills:vec text; portfolios:vec text; services:vec text}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}}) query;
    getUserByOwner: () -> (variant {Ok:record {id:text; bio:text; userName:text; "principal":principal; email:text; imageUrl:text; expertise:text; skills:vec text; portfolios:vec text; services:vec text}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}}) query;
    getUserServices: (text) -> (vec record {id:text; status:text; terms:text; title:text; cost:nat64; createdAt:text; user:principal; description:text; deadline:text; updatedAt:opt text; category:text; freelancer:opt text}) query;
    getUsers: () -> (vec record {id:text; bio:text; userName:text; "principal":principal; email:text; imageUrl:text; expertise:text; skills:vec text; portfolios:vec text; services:vec text}) query;
    selectBid: (text) -> (variant {Ok:record {id:text; status:text; terms:text; title:text; cost:nat64; createdAt:text; user:principal; description:text; deadline:text; updatedAt:opt text; category:text; freelancer:opt text}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}});
    updateService: (record {id:text; description:text}) -> (variant {Ok:record {id:text; status:text; terms:text; title:text; cost:nat64; createdAt:text; user:principal; description:text; deadline:text; updatedAt:opt text; category:text; freelancer:opt text}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}});
    updateUser: (record {id:text; bio:text; userName:text; email:text; imageUrl:text; expertise:text; portfolios:vec text}) -> (variant {Ok:record {id:text; bio:text; userName:text; "principal":principal; email:text; imageUrl:text; expertise:text; skills:vec text; portfolios:vec text; services:vec text}; Err:variant {SubscriptionFailed:text; InvalidPayload:text; NotFound:text; SubscriptionCompleted:text}});
    verifySubscription: (principal, nat64, nat64, nat64) -> (bool) query;
}
